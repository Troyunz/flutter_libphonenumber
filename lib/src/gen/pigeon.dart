// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class FormatRequest {
  String? phone;
  String? region;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['phone'] = phone;
    pigeonMap['region'] = region;
    return pigeonMap;
  }

  static FormatRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FormatRequest()
      ..phone = pigeonMap['phone'] as String?
      ..region = pigeonMap['region'] as String?;
  }
}

class FormatResponse {
  String? formatted;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['formatted'] = formatted;
    return pigeonMap;
  }

  static FormatResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FormatResponse()
      ..formatted = pigeonMap['formatted'] as String?;
  }
}

class ApiCountryWithPhoneCode {
  String? phoneCode;
  String? countryCode;
  String? exampleNumberMobileNational;
  String? exampleNumberFixedLineNational;
  String? phoneMaskMobileNational;
  String? phoneMaskFixedLineNational;
  String? exampleNumberMobileInternational;
  String? exampleNumberFixedLineInternational;
  String? phoneMaskMobileInternational;
  String? phoneMaskFixedLineInternational;
  String? countryName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['phoneCode'] = phoneCode;
    pigeonMap['countryCode'] = countryCode;
    pigeonMap['exampleNumberMobileNational'] = exampleNumberMobileNational;
    pigeonMap['exampleNumberFixedLineNational'] = exampleNumberFixedLineNational;
    pigeonMap['phoneMaskMobileNational'] = phoneMaskMobileNational;
    pigeonMap['phoneMaskFixedLineNational'] = phoneMaskFixedLineNational;
    pigeonMap['exampleNumberMobileInternational'] = exampleNumberMobileInternational;
    pigeonMap['exampleNumberFixedLineInternational'] = exampleNumberFixedLineInternational;
    pigeonMap['phoneMaskMobileInternational'] = phoneMaskMobileInternational;
    pigeonMap['phoneMaskFixedLineInternational'] = phoneMaskFixedLineInternational;
    pigeonMap['countryName'] = countryName;
    return pigeonMap;
  }

  static ApiCountryWithPhoneCode decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ApiCountryWithPhoneCode()
      ..phoneCode = pigeonMap['phoneCode'] as String?
      ..countryCode = pigeonMap['countryCode'] as String?
      ..exampleNumberMobileNational = pigeonMap['exampleNumberMobileNational'] as String?
      ..exampleNumberFixedLineNational = pigeonMap['exampleNumberFixedLineNational'] as String?
      ..phoneMaskMobileNational = pigeonMap['phoneMaskMobileNational'] as String?
      ..phoneMaskFixedLineNational = pigeonMap['phoneMaskFixedLineNational'] as String?
      ..exampleNumberMobileInternational = pigeonMap['exampleNumberMobileInternational'] as String?
      ..exampleNumberFixedLineInternational = pigeonMap['exampleNumberFixedLineInternational'] as String?
      ..phoneMaskMobileInternational = pigeonMap['phoneMaskMobileInternational'] as String?
      ..phoneMaskFixedLineInternational = pigeonMap['phoneMaskFixedLineInternational'] as String?
      ..countryName = pigeonMap['countryName'] as String?;
  }
}

class GetAllSupportedRegionsReponse {
  ApiCountryWithPhoneCode? _;
  List<ApiCountryWithPhoneCode?>? countries;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['_'] = _ == null ? null : _!.encode();
    pigeonMap['countries'] = countries;
    return pigeonMap;
  }

  static GetAllSupportedRegionsReponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GetAllSupportedRegionsReponse()
      .._ = pigeonMap['_'] != null
          ? ApiCountryWithPhoneCode.decode(pigeonMap['_']!)
          : null
      ..countries = (pigeonMap['countries'] as List<Object?>?)?.cast<ApiCountryWithPhoneCode?>();
  }
}

class _FlutterLibPhoneNumberApiCodec extends StandardMessageCodec {
  const _FlutterLibPhoneNumberApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FormatRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is FormatResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is GetAllSupportedRegionsReponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return FormatRequest.decode(readValue(buffer)!);
      
      case 129:       
        return FormatResponse.decode(readValue(buffer)!);
      
      case 130:       
        return GetAllSupportedRegionsReponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class FlutterLibPhoneNumberApi {
  /// Constructor for [FlutterLibPhoneNumberApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterLibPhoneNumberApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FlutterLibPhoneNumberApiCodec();

  Future<FormatResponse> format(FormatRequest request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FlutterLibPhoneNumberApi.format', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(request) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as FormatResponse?)!;
    }
  }

  Future<GetAllSupportedRegionsReponse> getAllSupportedRegions() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FlutterLibPhoneNumberApi.getAllSupportedRegions', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as GetAllSupportedRegionsReponse?)!;
    }
  }
}
