// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "FlutterLibPhoneNumberApi.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface FormatRequest ()
+(FormatRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FormatResponse ()
+(FormatResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface ApiCountryWithPhoneCode ()
+(ApiCountryWithPhoneCode*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GetAllSupportedRegionsReponse ()
+(GetAllSupportedRegionsReponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FormatRequest
+(FormatRequest*)fromMap:(NSDictionary*)dict {
  FormatRequest* result = [[FormatRequest alloc] init];
  result.phone = dict[@"phone"];
  if ((NSNull *)result.phone == [NSNull null]) {
    result.phone = nil;
  }
  result.region = dict[@"region"];
  if ((NSNull *)result.region == [NSNull null]) {
    result.region = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.phone ? self.phone : [NSNull null]), @"phone", (self.region ? self.region : [NSNull null]), @"region", nil];
}
@end

@implementation FormatResponse
+(FormatResponse*)fromMap:(NSDictionary*)dict {
  FormatResponse* result = [[FormatResponse alloc] init];
  result.formatted = dict[@"formatted"];
  if ((NSNull *)result.formatted == [NSNull null]) {
    result.formatted = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.formatted ? self.formatted : [NSNull null]), @"formatted", nil];
}
@end

@implementation ApiCountryWithPhoneCode
+(ApiCountryWithPhoneCode*)fromMap:(NSDictionary*)dict {
  ApiCountryWithPhoneCode* result = [[ApiCountryWithPhoneCode alloc] init];
  result.phoneCode = dict[@"phoneCode"];
  if ((NSNull *)result.phoneCode == [NSNull null]) {
    result.phoneCode = nil;
  }
  result.countryCode = dict[@"countryCode"];
  if ((NSNull *)result.countryCode == [NSNull null]) {
    result.countryCode = nil;
  }
  result.exampleNumberMobileNational = dict[@"exampleNumberMobileNational"];
  if ((NSNull *)result.exampleNumberMobileNational == [NSNull null]) {
    result.exampleNumberMobileNational = nil;
  }
  result.exampleNumberFixedLineNational = dict[@"exampleNumberFixedLineNational"];
  if ((NSNull *)result.exampleNumberFixedLineNational == [NSNull null]) {
    result.exampleNumberFixedLineNational = nil;
  }
  result.phoneMaskMobileNational = dict[@"phoneMaskMobileNational"];
  if ((NSNull *)result.phoneMaskMobileNational == [NSNull null]) {
    result.phoneMaskMobileNational = nil;
  }
  result.phoneMaskFixedLineNational = dict[@"phoneMaskFixedLineNational"];
  if ((NSNull *)result.phoneMaskFixedLineNational == [NSNull null]) {
    result.phoneMaskFixedLineNational = nil;
  }
  result.exampleNumberMobileInternational = dict[@"exampleNumberMobileInternational"];
  if ((NSNull *)result.exampleNumberMobileInternational == [NSNull null]) {
    result.exampleNumberMobileInternational = nil;
  }
  result.exampleNumberFixedLineInternational = dict[@"exampleNumberFixedLineInternational"];
  if ((NSNull *)result.exampleNumberFixedLineInternational == [NSNull null]) {
    result.exampleNumberFixedLineInternational = nil;
  }
  result.phoneMaskMobileInternational = dict[@"phoneMaskMobileInternational"];
  if ((NSNull *)result.phoneMaskMobileInternational == [NSNull null]) {
    result.phoneMaskMobileInternational = nil;
  }
  result.phoneMaskFixedLineInternational = dict[@"phoneMaskFixedLineInternational"];
  if ((NSNull *)result.phoneMaskFixedLineInternational == [NSNull null]) {
    result.phoneMaskFixedLineInternational = nil;
  }
  result.countryName = dict[@"countryName"];
  if ((NSNull *)result.countryName == [NSNull null]) {
    result.countryName = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.phoneCode ? self.phoneCode : [NSNull null]), @"phoneCode", (self.countryCode ? self.countryCode : [NSNull null]), @"countryCode", (self.exampleNumberMobileNational ? self.exampleNumberMobileNational : [NSNull null]), @"exampleNumberMobileNational", (self.exampleNumberFixedLineNational ? self.exampleNumberFixedLineNational : [NSNull null]), @"exampleNumberFixedLineNational", (self.phoneMaskMobileNational ? self.phoneMaskMobileNational : [NSNull null]), @"phoneMaskMobileNational", (self.phoneMaskFixedLineNational ? self.phoneMaskFixedLineNational : [NSNull null]), @"phoneMaskFixedLineNational", (self.exampleNumberMobileInternational ? self.exampleNumberMobileInternational : [NSNull null]), @"exampleNumberMobileInternational", (self.exampleNumberFixedLineInternational ? self.exampleNumberFixedLineInternational : [NSNull null]), @"exampleNumberFixedLineInternational", (self.phoneMaskMobileInternational ? self.phoneMaskMobileInternational : [NSNull null]), @"phoneMaskMobileInternational", (self.phoneMaskFixedLineInternational ? self.phoneMaskFixedLineInternational : [NSNull null]), @"phoneMaskFixedLineInternational", (self.countryName ? self.countryName : [NSNull null]), @"countryName", nil];
}
@end

@implementation GetAllSupportedRegionsReponse
+(GetAllSupportedRegionsReponse*)fromMap:(NSDictionary*)dict {
  GetAllSupportedRegionsReponse* result = [[GetAllSupportedRegionsReponse alloc] init];
  result._ = [ApiCountryWithPhoneCode fromMap:dict[@"_"]];
  if ((NSNull *)result._ == [NSNull null]) {
    result._ = nil;
  }
  result.countries = dict[@"countries"];
  if ((NSNull *)result.countries == [NSNull null]) {
    result.countries = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self._ ? [self._ toMap] : [NSNull null]), @"_", (self.countries ? self.countries : [NSNull null]), @"countries", nil];
}
@end

@interface FlutterLibPhoneNumberApiCodecReader : FlutterStandardReader
@end
@implementation FlutterLibPhoneNumberApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FormatRequest fromMap:[self readValue]];
    
    case 129:     
      return [FormatResponse fromMap:[self readValue]];
    
    case 130:     
      return [GetAllSupportedRegionsReponse fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FlutterLibPhoneNumberApiCodecWriter : FlutterStandardWriter
@end
@implementation FlutterLibPhoneNumberApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FormatRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FormatResponse class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[GetAllSupportedRegionsReponse class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FlutterLibPhoneNumberApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterLibPhoneNumberApiCodecReaderWriter
- (FlutterStandardWriter*)writerWithData:(NSMutableData*)data {
  return [[FlutterLibPhoneNumberApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader*)readerWithData:(NSData*)data {
  return [[FlutterLibPhoneNumberApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec>* FlutterLibPhoneNumberApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec* s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FlutterLibPhoneNumberApiCodecReaderWriter* readerWriter = [[FlutterLibPhoneNumberApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void FlutterLibPhoneNumberApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FlutterLibPhoneNumberApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FlutterLibPhoneNumberApi.format"
        binaryMessenger:binaryMessenger
        codec:FlutterLibPhoneNumberApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FormatRequest *input = message;
        [api format:input completion:^(FormatResponse *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FlutterLibPhoneNumberApi.getAllSupportedRegions"
        binaryMessenger:binaryMessenger
        codec:FlutterLibPhoneNumberApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getAllSupportedRegions:^(GetAllSupportedRegionsReponse *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
